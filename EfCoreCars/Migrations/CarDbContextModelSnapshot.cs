// <auto-generated />
using EfCoreCars;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfCoreCars.Migrations
{
    [DbContext(typeof(CarDbContext))]
    partial class CarDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EfCoreCars.Entities.Car", b =>
                {
                    b.Property<int>("CarIdentifer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarIdentifer"));

                    b.Property<double>("Consumption")
                        .HasColumnType("float");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CarIdentifer");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            CarIdentifer = 1,
                            Consumption = 200.0,
                            ManufacturerId = 1,
                            Name = "Datsum"
                        });
                });

            modelBuilder.Entity("EfCoreCars.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.HasIndex("ManufacturerId")
                        .IsUnique();

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            ManufacturerId = 1,
                            Name = "Tyskland"
                        });
                });

            modelBuilder.Entity("EfCoreCars.Entities.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturer");

                    b.HasData(
                        new
                        {
                            ManufacturerId = 1,
                            Name = "W"
                        });
                });

            modelBuilder.Entity("EfCoreCars.Entities.Car", b =>
                {
                    b.HasOne("EfCoreCars.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Cars")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("EfCoreCars.Entities.Location", b =>
                {
                    b.HasOne("EfCoreCars.Entities.Manufacturer", "Manufacturer")
                        .WithOne("Location")
                        .HasForeignKey("EfCoreCars.Entities.Location", "ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("EfCoreCars.Entities.Manufacturer", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
